}
n <- 30000
q <- 20
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
n <- 30000
q <- 20
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
n <- 30000
q <- 20
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
n <- 30000
q <- 20
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
matrix(data=rnorm(n), nrow=n)
matrix(data=rnorm(n), nrow=n)
n <- 30000
q <- 20
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
n <- 30000
q <- 50
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
n <- 300000
q <- 50
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
nullFit
crICSKAT <- function(leftDmat, rightDmat, leftTimes, deltaVec, gMat, gSummed, null_beta, pvalue=TRUE) {
q <- ncol(gMat)
numCov <- ncol(leftDmat)
if(is.na(null_beta)){
return(list(lambdaQ=NA, p_SKAT=NA, p_burden=NA, skatQ=NA, Ugamma=NA, null_beta = null_beta,
burdenQ=NA, sig_mat = NA, complex=NA, err=3, errMsg="Null beta input is NA"))
}
forUgamma <- scoreEqSpline(x=null_beta, leftDmat=leftDmat,rightDmat=rightDmat, leftTimes=leftTimes,
deltaVec=deltaVec, gSummed=gSummed, gMat=gMat, estG=FALSE)
iMatPartial <- calcInfo(leftDmat=leftDmat, rightDmat=rightDmat, leftTimes=leftTimes,
theta1=null_beta[1:numCov],
theta2=null_beta[(numCov+1):length(null_beta)],
deltaVec=deltaVec, gSummed=gSummed, gMat=NULL)
forIgt <- calcInfo(leftDmat = leftDmat, rightDmat = rightDmat, leftTimes = leftTimes,
theta1 = c(null_beta[1:numCov], rep(0, q)),
theta2 = null_beta[(numCov+1):length(null_beta)],
deltaVec = deltaVec, gSummed = gSummed, gMat = gMat)
skatQ <- t(forUgamma[(numCov+1):(numCov+q)]) %*% forUgamma[(numCov+1):(numCov+q)]
burdenQ <- (sum(forUgamma[(numCov+1):(numCov+q)]))^2
Itt <- -iMatPartial
Igg <- -forIgt[(numCov+1):(numCov+q), (numCov+1):(numCov+q)]
Igt <- -forIgt[c(1:numCov, ((numCov+1)+q):nrow(forIgt)), (numCov+1):(numCov+q)]
if (length(which(is.na(Igg))) > 0 | length(which(is.na(Igt))) > 0 | length(which(is.na(Itt))) > 0) {
return(list(lambdaQ=NA, p_SKAT=NA, p_burden=NA, skatQ=NA, Ugamma=forUgamma, null_beta = null_beta,
burdenQ=NA, sig_mat = NA, complex=NA, err=99, errMsg="NA in variance matrix"))
}
sig_mat <- Igg - t(Igt) %*% solve(Itt) %*% (Igt)
if (length(which(is.na(sig_mat))) > 0) {
return(list(lambdaQ=NA, p_SKAT=NA, p_burden=NA, skatQ=NA, Ugamma=forUgamma, null_beta = null_beta,
burdenQ=NA, sig_mat = NA, complex=NA, err=99, errMsg="NA in variance matrix"))
}
errCode <- 0
errMsg <- ""
# calculate p-value
if (pvalue) {
lambdaQ <- eigen(sig_mat)$values
p_SKAT <- CompQuadForm::davies(q=skatQ, lambda=lambdaQ, delta=rep(0,length(lambdaQ)), acc=1e-7)$Qq
# as noted in the CompQuadForm documentation, sometimes you need to play with acc or lim parameters
# to get a p-value between 0 and 1
if (!is.na(p_SKAT)) {
if (p_SKAT > 1) {
paramDF <- data.frame(expand.grid(lim = c(10000, 20000, 50000), acc=c(1e-7, 1e-6, 1e-5, 1e-4)))
paramCounter <- 1
while(p_SKAT > 1) {
tempLim <- paramDF$lim[paramCounter]
tempAcc <- paramDF$acc[paramCounter]
p_SKAT <- CompQuadForm::davies(q=skatQ, lambda=lambdaQ, delta=rep(0,length(lambdaQ)), acc=tempAcc, lim=tempLim)$Qq
paramCounter <- paramCounter + 1
if (paramCounter > nrow(paramDF)) {break}
}
errCode <- 22
errMsg <- "Had to adjust parameters on CompQuadForm"
}
}
B_burden= burdenQ / sum(sig_mat);
p_burden= 1 - stats::pchisq(B_burden, df = 1)
} else {
pSKAT <- NA
lambdaQ <- 1
p_burden <- NA
}
return(list(lambdaQ=lambdaQ, p_SKAT=p_SKAT, p_burden=p_burden, skatQ=skatQ, Ugamma=forUgamma, null_beta = null_beta,
burdenQ=burdenQ, sig_mat = sig_mat, complex=is.complex(lambdaQ), err=errCode, errMsg=errMsg))
}
n <- 300000
q <- 10
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
crICSKAT <- function(leftDmat, rightDmat, leftTimes, deltaVec, gMat, gSummed, null_beta, pvalue=TRUE) {
q <- ncol(gMat)
numCov <- ncol(leftDmat)
if(is.na(null_beta)[1]){
return(list(lambdaQ=NA, p_SKAT=NA, p_burden=NA, skatQ=NA, Ugamma=NA, null_beta = null_beta,
burdenQ=NA, sig_mat = NA, complex=NA, err=3, errMsg="Null beta input is NA"))
}
forUgamma <- scoreEqSpline(x=null_beta, leftDmat=leftDmat,rightDmat=rightDmat, leftTimes=leftTimes,
deltaVec=deltaVec, gSummed=gSummed, gMat=gMat, estG=FALSE)
iMatPartial <- calcInfo(leftDmat=leftDmat, rightDmat=rightDmat, leftTimes=leftTimes,
theta1=null_beta[1:numCov],
theta2=null_beta[(numCov+1):length(null_beta)],
deltaVec=deltaVec, gSummed=gSummed, gMat=NULL)
forIgt <- calcInfo(leftDmat = leftDmat, rightDmat = rightDmat, leftTimes = leftTimes,
theta1 = c(null_beta[1:numCov], rep(0, q)),
theta2 = null_beta[(numCov+1):length(null_beta)],
deltaVec = deltaVec, gSummed = gSummed, gMat = gMat)
skatQ <- t(forUgamma[(numCov+1):(numCov+q)]) %*% forUgamma[(numCov+1):(numCov+q)]
burdenQ <- (sum(forUgamma[(numCov+1):(numCov+q)]))^2
Itt <- -iMatPartial
Igg <- -forIgt[(numCov+1):(numCov+q), (numCov+1):(numCov+q)]
Igt <- -forIgt[c(1:numCov, ((numCov+1)+q):nrow(forIgt)), (numCov+1):(numCov+q)]
if (length(which(is.na(Igg))) > 0 | length(which(is.na(Igt))) > 0 | length(which(is.na(Itt))) > 0) {
return(list(lambdaQ=NA, p_SKAT=NA, p_burden=NA, skatQ=NA, Ugamma=forUgamma, null_beta = null_beta,
burdenQ=NA, sig_mat = NA, complex=NA, err=99, errMsg="NA in variance matrix"))
}
sig_mat <- Igg - t(Igt) %*% solve(Itt) %*% (Igt)
if (length(which(is.na(sig_mat))) > 0) {
return(list(lambdaQ=NA, p_SKAT=NA, p_burden=NA, skatQ=NA, Ugamma=forUgamma, null_beta = null_beta,
burdenQ=NA, sig_mat = NA, complex=NA, err=99, errMsg="NA in variance matrix"))
}
errCode <- 0
errMsg <- ""
# calculate p-value
if (pvalue) {
lambdaQ <- eigen(sig_mat)$values
p_SKAT <- CompQuadForm::davies(q=skatQ, lambda=lambdaQ, delta=rep(0,length(lambdaQ)), acc=1e-7)$Qq
# as noted in the CompQuadForm documentation, sometimes you need to play with acc or lim parameters
# to get a p-value between 0 and 1
if (!is.na(p_SKAT)) {
if (p_SKAT > 1) {
paramDF <- data.frame(expand.grid(lim = c(10000, 20000, 50000), acc=c(1e-7, 1e-6, 1e-5, 1e-4)))
paramCounter <- 1
while(p_SKAT > 1) {
tempLim <- paramDF$lim[paramCounter]
tempAcc <- paramDF$acc[paramCounter]
p_SKAT <- CompQuadForm::davies(q=skatQ, lambda=lambdaQ, delta=rep(0,length(lambdaQ)), acc=tempAcc, lim=tempLim)$Qq
paramCounter <- paramCounter + 1
if (paramCounter > nrow(paramDF)) {break}
}
errCode <- 22
errMsg <- "Had to adjust parameters on CompQuadForm"
}
}
B_burden= burdenQ / sum(sig_mat);
p_burden= 1 - stats::pchisq(B_burden, df = 1)
} else {
pSKAT <- NA
lambdaQ <- 1
p_burden <- NA
}
return(list(lambdaQ=lambdaQ, p_SKAT=p_SKAT, p_burden=p_burden, skatQ=skatQ, Ugamma=forUgamma, null_beta = null_beta,
burdenQ=burdenQ, sig_mat = sig_mat, complex=is.complex(lambdaQ), err=errCode, errMsg=errMsg))
}
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
n <- 30000
q <- 10
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
n <- 30000
q <- 100
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
n <- 300000
q <- 100
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
n <- 30000
q <- 100
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
n <- 30000
q <- 100
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=TRUE, method="Broyden")
out <- crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
out$p_SKAT
out$p_burden
n <- 30000
q <- 200
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=FALSE, method="Broyden")
out <- crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
out
n <- 30000
q <- 500
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=FALSE, method="Broyden")
out <- crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
out
out$p_SKAT
formatC(out$p_SKAT, format = "e")
formatC(out$p_burden, format = "e")
n <- 30000
q <- 500
alpha1 <- -0.058
alpha2 <- -0.035
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=FALSE, method="Broyden")
out <- crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
out$p_SKAT
formatC(out$p_SKAT, format = "e")
n <- 30000
q <- 500
alpha1 <- -0.1
alpha2 <- -0.3
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 1:5
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=FALSE, method="Broyden")
out <- crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
out
outcomeDat
n <- 30000
q <- 500
alpha1 <- -0.1
alpha2 <- -0.3
beta1 <- 0.03
beta2 <- log(1 - exp(beta1 / alpha1)) * alpha2
outcomeDat <- genData(seed=NULL, n=n, alpha1=alpha1, alpha2=alpha2, beta1=beta1, beta2=beta2)
xMat <- matrix(data=rnorm(n), nrow=n)
gMat <- matrix(data=rbinom(n=n*q, size=2, prob=0.3), ncol=q)
gSummed <- matrix(data=apply(gMat, 1, sum), ncol=1)
obsTimes <- 3:7
lt <- outcomeDat$leftTimes
rt <- outcomeDat$rightTimes
obsInd <- outcomeDat$deltaVecSimple
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
dmats
dmats <- makeICdmat(xMat = xMat, lt = lt, rt = rt, obsInd = obsInd, quant_r = NULL, nKnots = 1)
nullFit <- crICSKAT_fit_null(init_beta=rep(0, 9), leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat,
deltaVec=outcomeDat$deltaVec, leftTimes=outcomeDat$leftTimes, gSummed=gSummed, allowSingular=FALSE, method="Broyden")
out <- crICSKAT(leftDmat=dmats$left_dmat, rightDmat=dmats$right_dmat, leftTimes=outcomeDat$leftTimes,
deltaVec=outcomeDat$deltaVec, gMat=gMat, gSummed=gSummed, null_beta=nullFit$beta_fit, pvalue=TRUE)
out$p_SKAT
out$p_burden
library(crICSKAT)
crICSKAT::exampleData
library(crICSKAT)
library(crICSKAT)
devtools::document()
devtools::document()
library(crICSKAT)
devtools::document()
library(crICSKAT)
library(crICSKAT)
devtools::document()
?crICSKAT
library(crICSKAT)
crICSKAT_fit_null
library(crICSKAT)
crICSKAT::calcInfo
library(crICSKAT)
library(crICSKAT)
library(crICSKAT)
usethis::create_github_token()
gitcreds::gitcreds_set()
